---
title: Continuous Integration Testing
owner: Services
---

This topic describes how to do continuous integration (CI) testing on your tile.

<strong><%= modified_date %></strong>

There are two ways to do CI testing on your tile:

+ Use the Tile Dashboard provided as service by the Pivotal ISV team.<br>
  See [Use Tile Dashboard CI to Test Your Tile](#dashboard) below.<br>
  This is the method recommended by Pivotal.
+ Set up and use your own Concourse pipeline.<br>
  See [Set Up a Concourse Pipeline and Test Your Tile](#concourse) below.<br>
  This method is more time consuming and not recommended for new partners 
  or partners working on only one tile.

## <a id="dashboard"></a>Use Tile Dashboard CI to Test Your Tile

With your tile in our Tile Dashboard CI testing system, we all win.
You stay on top of changes to PCF that may require changes in your tile.
Our field representatives gain a clear understanding of your tile’s compatibility across PCF versions,
underlying IaaS, and different flavors of environments.
This also relieves you from maintaining your own CI system, keeping up with latest PCF versions, etc.

The Tile Dashboard CI is part of our Enterprise Readiness criteria
which is used to inform the field of the quality and capabilities of your tile,
so it is important to get your tile performing well.
For an introduction to our readiness criteria, see 
[Enterprise Readiness criteria](https://docs.google.com/presentation/d/1Z05EuIB11cLejldShVTffprzBulZxiL8MTVxrfPbvT0).

### <a id="tile-dashboard-ci"></a> The Tile Dashboard CI Test Process

The Tile Dashboard CI runs your tile through a series of steps, which include:

1. Downloads your tile from PivNet and checks hash integrity.

2. Scans your tile for known issues or potential problems, like:
  - Use of deprecated properties.
  - Use of properties whose values/meanings have changed.
  - Use of features that are no longer supported.

3. Configures, installs, tests, and uninstalls your tile in several PCF environments:
  - A patch release of every supported Pivotal Application Service and Elastic Runtime minor version.
  - Every supported IaaS
  - Environments with extra configuration, such as multiple availability zones and IPsec

The Tile Dashboard reports the results of each step.
The results reported for each step include a general pass/fail status, the execution log, and output.
If a step fails for a reason unrelated to a tile, such as a network glitch,
you can retry that step from the Tile Dashboard CI.
For more information, see Step X, below.

### <a id="prereq"></a>Prerequisites

+ A Slack account on the PivotalPartners.slack.com organization.
    If you don't have an account, contact the technical program management of the ISV team.

+ You need to belong to your company's channel in the PivotalPartners.slack.com organization.

+ You need to have your tile uploaded to the Tile Dashboard.

    | To upload your tile for a &hellip; | Then&hellip; |
    |---------------------|--------------|
    | first release     | email your Pivotal contact for help uploading the tile. |
    | subsequent release| you can upload pre-releases to the [Pivotal Network](https:network.pivotal.io).|
+ 
### STEPS

1. 
1. Log in to the Tile Dashboard CI 

1. 
This topic explains how to use the [Tile Dashboard CI](https://tile-dashboard.cfapps.io/static/index.html#/environments)
continuous integration (CI) system and its underlying [Concourse](http://concourse.ci) platform
to help develop and integrate software services for Pivotal Cloud Foundry (PCF).


### <a id="what-we-need"></a> What Pivotal Needs from You

To integrate your tile with the [Tile Dashboard CI](https://tile-dashboard.cfapps.io/static/index.html#/environments),
Pivotal needs you to upload or send the following:

* Your pre-release [tile](#upload)
* Your tile's [configuration parameters](#params)
*
*
* One or more [test configurations](#test)
* Any [backing services](#backing) that the tile requires

These requirements are discussed below.

#### <a id="upload"></a> Uploaded Tile

If this is your first tile and you have not yet released it, email your Pivotal contact to upload the pre-release tile.
The Tile Dashboard CI then picks up the pre-release and run it through CI.

After the first release of your tile, the admin for your tile can continue to upload new pre-releases
for future versions to network.pivotal.io.

#### <a id="params"></a> Tile Configuration Parameters

To automate the installation of your tile,
we need the configuration parameters the operator would enter into Ops Manager forms.
The Tile Dashboard CI includes an interface for you to enter this configuration directly for properties,
in the format used by the [om tool](https://github.com/pivotal-cf/om).
Click on your tile’s slug, then click the “Configure” link near the top of the screen,
and you can enter the following information:

* **Properties**: Configure your tile’s properties, if necessary,
  using the [JSON product properties format used by om](https://github.com/pivotal-cf/om/blob/master/docs/configure-product/README.md#configuring-the---product-properties).
 (Note: this is the same format used by the Operations Manager product properties API.)

* **UAA Users**: Include a list of UAA users to use for testing your tile.
  The format is a JSON array, with the specific format described on the configuration page.

#### <a id="dashboard-config"></a> Tile Dashboard Configure (Does this mean "Configure a Tile"?)

The Tile Dashboard CI maintains install configuration for the properties needed by your tile during installation and testing of the tile.

HOW TO REWRITE THIS: The config page is evolving to assist managing properties as required by the OM tool (Ops Manager's cli). 

WHAT DO PARTNERS NEED TO DO?

1. visit the tiles page for a specific release  (Navigate to the .... ?)

2. Click **Configure**.
   The Tile Dashboard Config view appears.

    DO YOU HAVE TO CONFIGURE PROPERTIES ON BOTH TABS, or can I choose one tab and do all the configuration there? 

3. Click **Properties**.
   
    DESCRIBE HOW TO USE THE PROPERTIES TAB
   * The Properties tab is an evolving form that provides assistance with configuring basic types for most simple property types and many complex types.
  * To assist with configuring properties, the form pulls properties directly from your tile.yml file parsing the properties_blueprints to provide a basic starting point template for all the required properties.  If a property is required and does not yet have valid values, the field will display in red.
  * All of the fields displayed in red must be filled out before Tile Dashboard will run on our environments to prevent false failures due to missing config properties.

4. Click **Advanced - Json Properties**.
  * The Advanced Properties tab shows the properties in JSON format
  * If a property has a required true JSON attribute that means the property is required but the value has not been provided.
  * All of the fields displayed with the required true attribute must be filled out before the Tile Dashboard CI will run on our environments to prevent false failures due to missing config properties.

1. After you have provided the value for a property, delete the required attribute to tell Tile Dashboard that this field is now provided.

1. Click **Save**.

1. Repeat the steps above until all required attributes are cleared.

1. To run all tests, click **Save and Run**.
  
##### About Collections
 
http://localhost:4567/tiledev/1-12/product-template-reference.html#simple-vs-complex

To address collections, the OM tool has a new experimental feature staged-config which can be used to format the collection.

This feature was introduced in [OM 0.36.0](https://github.com/pivotal-cf/om/releases/tag/0.36.0). staged-config exports a schema format in either YAML or JSON showing the required structure of the config for OM. 

The feature supports either YAML or JSON but Tile Config requires JSON so it is recommended to use your favorite YAML to JSON tool to convert it to JSON for Tile Dashboard.

#### <a id="gating"></a> Tile Dashboard Configure Gating

To prevent false failures from missing configurations, the Configure step is Gating

* **Config** column
  - The Config column is a quick job that runs after Scan to check that a Tile Config is completed meaning that there are no required fields that are missing values.

To see if a Tile has passed Config, click on the Config column. 
A status of complete means that the Tile Config has all the required fields provided. 
A status of failed will be accompanied by a list of missing required fields. 
To address any missing required fields, visit the Config view and
fill out all the fields in red in the Properties Tab or with the attributes required in the Advanced JSON tab.

#### <a id="test"></a> Test Configuration

After your tile is installed, Tile Dashboard will run any post-deploy errands your tile has defined, including tests.
Ideally your tile will include tests that exercise all of its functionality.
We have some ideas for expanding the Tile Dashboard testing capabilities;
if you’re interested in other ways of defining tests,
contact us on [Pivotal Partners Slack](https://pivotalpartners.slack.com/).

#### <a id="backing"></a> Backing Services

If your tile requires a backing service outside of the existing PCF environment
(e.g., your tile is a service broker to a SaaS offering),
you are responsible for maintaining the backing service in an environment
that the Tile Dashboard can reach (i.e., it must be internet-facing).

## <a id="concourse"></a> Set Up a Concourse Pipeline and Test Your Tile

The [Tile Dashboard CI](#tile-dashboard-ci) that Pivotal runs for its technical partnership program members
uses the CI tool [Concourse](http://concourse.ci/) to make sure that partner products continue
to work with every new release of the platform.

With more effort, you can also follow the pointers below to set up your own Concourse CI pipeline
that integrates and tests your tile on your own deployment of the latest PCF.

While you are of course also free to use any other CI system you are familiar with,
Pivotal's tools and documentation are built to make Concourse CI as easy as possible.

### <a id="server"></a> Set Up a Concourse Server

You need a Concourse server to host your pipeline.

If you partner with Pivotal,
the [Tile Dashboard CI](#tile-dashboard-ci) servers can host your pipeline
and provide S3 storage to exchange artifacts with your own servers.

If you choose to set up your own Concourse server,
see the instructions [Concourse: Setup & Operations](https://concourse-ci.org/setup-and-operations.html).
 
### <a id="pipeline"></a> Create a Concourse Pipeline for Your Tile

A typical CI pipeline for a tile consists of the following jobs:

- Build the tile
- Deploy it to PCF
- Run a set of deployment tests to verify that it deployed and works correctly
- Remove it from PCF

You describe this pipeline in a `pipeline.yml` file that is then uploaded to the
Concourse server. [Tile Generator](tile-generator.html) contains a sample
pipeline that you can clone for your own tile. We are working on automating
the process of generating a pipeline template for you.
 
### <a id="pool"></a> Set Up PCF for Your CI Pipeline

Pivotal partners who have us host their pipeline have access to a pool of PCF
instances that are managed by us and are regularly updated with the latest
(pre-)release versions of PCF. If you set up your own concourse server, you
will have to target your pipeline at a [PCF instance you have setup](./environments.html).

Concourse has a resource type to manage a pool of resources that are shared
between pipelines, which is what we use to serialize PCF access between the
partner pipelines that run on our concourse server.
