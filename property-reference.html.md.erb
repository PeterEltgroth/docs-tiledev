---
title: Property Reference
owner: Ops Manager
---

<strong><%= modified_date %></strong>

This topic explains how PCF Tiles describe properties.

## <a id='expressions'></a>Double-Parentheses Expressions

The product template `.yml` file in a tile's `metadata` subdirectory defines how the tile interface collects configurable properties from the user, and how Ops Manager incorporates these properties into the deployment manifest that it creates.

The product template contains `manifest` snippets in both the `form_types` section that defines the tile interface, and the `job_types` section describing the jobs that the manifest deploys. Within these snippets, you can use special expressions to include property values that are otherwise not known ahead of time, such as configurable properties or system properties:

* Double-parentheses expressions designate property values that Ops Manager fills in when it generates the deployment manifest, after the user clicks **Apply Changes**. These values include configurable properties and properties supplied by Ops Manager.

* Triple-parentheses expressions designate property values that BOSH supplies when it deploys instances of the tile service, such as CredHub credentials.

### <a id='property-refs'></a>Referencing Properties

Evaluating a property can be represented by piecing two segments together:

* The location of the property
* What information from the property you are looking to access, or _accessors_

Together, the double-parentheses expression can be written as:

````
(( LOCATION_OF_PROPERTY.ACCESSOR ))
```

The method of referencing the location of the property varies. Here is a complete list of ways to reference a property with some help text to indicate the situation.

<table class="nice"><tr>
   <td>.properties.top_level_property</td>
   <td>Refers to the property blueprint whose name is "top_level_property" found in the global list of properties of the same product
   </tr><tr>
   <td>.job_one.job_level_property</td>
   <td>Refers to the property blueprint whose name is "job_level_property" found in the list of properties of the job "job_one" of the same product</td>
   </tr><tr>
   <td>job_level_property</td>
   <td>Refers to the property blueprint whose name is "top_level_property" found in the same product and job whose manifest is currently being evaluated</td>
   </tr><tr>
   <td>..other_product.properties.top_level_property</td>
   <td>Refers to the property blueprint whose name is "top_level_property" found in the global list of properties of the product "other_product"</td>
   </tr><tr>
   <td>..other_product.job_two.job_level_property</td>
   <td>Refers to the property blueprint whose name is "job_level_property" found in the list of properties of the job "job_one" of the product "other_product"</td>
   </tr>
</table>

Accessors vary between property blueprint types. See the [Property Blueprint Reference](#property-blueprints) for available properties and their accessors.

The following example uses the property blueprint type `string` with its one accessor, `value`. A valid double-parentheses expression to access the value of this property (assuming it is top-level, and has the name `example-string`) would look like:

```
(( .properties.example-string.value ))
```

Ops Manager allows empty arrays in double-parentheses expressions. For example:

```
(( .properties.example-string.value || [] ))
```

### <a id='dollar'></a>Dollar Contexts

Outside of properties, you can also retrieve information about various configuration details of your product and Ops Manager.

* $ops\_manager: used by any product to obtain information about specific OpsManager
* $director: used by any product to obtain information about the Director
* $runtime: used by any product to obtain information about the CF tile (Pivotal Application Service)
* $self: used by your own product to obtain information about your product's configuration

#### $ops\_manager

<table class="nice"><tr>
  <td>ca_certificate</td>
  <td>Provides the root CA cert that is used to sign the Director VM</td>
  </tr><tr>
  <td>trusted_certificates</td>
  <td>Provides a list of certificates that are applied by the Director to all VMs</td>
  </tr><tr>
  <td>http_proxy</td>
  <td>Provides the comma separated values that are entered if Ops Manager traffic is directed to an HTTP Proxy</td>
  </tr><tr>
  <td>https_proxy</td>
  <td>Provides the comma separated values that are entered if Ops Manager traffic is directed to an HTTPS Proxy</td>
  </tr><tr>
  <td>no_proxy</td>
  <td>Provides the comma separated values that should not go through a proxy</td></tr>
  <td>dns_enabled</td>
  <td>Provides boolean flag indicating if BOSH DNS is enabled</td>
</tr>
</table>

#### $director

<table class="nice"><tr>
  <td>deployment_ip</td>
  <td>Provides the IP address that the BOSH Director is deployed on</td>
  </tr><tr>
  <td>username</td>
  <td>Provides the username for the Director VM</td>
  </tr>
  <tr>
  <td>password</td><td>Provides the password for the Director VM</td>
  </tr>
  <tr>
  <td>ntp_servers</td><td>Provides a list of ntp servers that are deployed by the Director</td>
  </tr>
  <tr>
  <td>ca_public_key</td>
  <td>Provides the public key that is used to sign the Director VM</td>
  </tr>
  <tr>
  <td>hostname</td>
  <td>Provides the hostname for the Director VM</td>
  </tr>
  <tr>
  <td>tld</td>
  <td>Returns the string <code>bosh</code> as the top-level domain (TLD) of the BOSH Director</td>
  </tr>
  <tr>
  <td>bosh_metrics_forwarder_client_name</td>
  <td>Provides the BOSH Metrics Forwarder client name</td>
  </tr>
  <tr>
  <td>bosh_metrics_forwarder_client_secret</td>
  <td>Provides the BOSH Metrics Forwarder client secret</td>
  </tr>
  <tr>
  <td>dns_release_present</td>
  <td>Exposes the Director configuration for <code>disable_dns_release</code></td>
</tr>
</table>

<p class="note"><strong>Note</strong>: Support for the <code>$director.username</code> and <code>$director.password</code> accessors will be removed in future versions of Ops Manager.</p>

#### $runtime

<table class="nice"><tr>
  <td>system_domain</td>
  <td>Provides domain for system-level PCF components, such as the API, UAA, or Apps Manager.</td>
  </tr><tr>
  <td>apps_domain</td>
  <td>Provides the default domain used by applications</td>
  </tr><tr>
  <td>system_api_url</td>
  <td>Provides the url to the PCF API component</td>
  </tr><tr>
  <td>login_url</td>
  <td>Provides the url to authenticate with the PCF components</td>
  <td>uaa_url</td>
  <td>Provides the url to the PCF UAA component</td>
  <td>login_url</td>
  <td>Provides the stemcell version that is being used by your product</td>
  <td>console_url</td>
  <td>Provides the url to the PCF Apps Manager component</td>
  <td>default_reply_to</td>
  <td>Provides the default reply-to email address for the system domain</td>
  <td>default_from</td>
  <td>Provides the default from email address of the system domain</td>
  </tr>
</table>

#### $self

<table class="nice"><tr>
  <td>uaa_client_name</td>
  <td>Provides the UAA client name created for your Product to communicate with the BOSH Director</td>
  </tr><tr>
  <td>uaa_client_secret</td>
  <td>Provides the UAA client secret created for your Product to communicate with the BOSH Director</td>
  </tr><tr>
  <td>service_network</td>
  <td>Provides the name of the service network that has been assigned to your product</td>
  </tr><tr>
  <td>stemcell_version</td>
  <td>Provides the stemcell version that is being used by your product</td>
  </tr>
</table>

### <a id='property-blueprints'></a>Property Reference Guide

#### string

Holds a single string value

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns the string value</td>
  </tr>
</table>

Product template example:

```
property_blueprints:
  - name: example_string
    type: string
    configurable: true
    default: 'Hello world'
    constraints:
    - must_match_regex: '\A[^!@#$%^&*()]*\z'
      error_message: 'This name cannot contain special characters.'
    - must_match_regex: '\A[^0-9]*\z'
      error_message: 'This name cannot contain digits.'

form_types:
  - name: example_form
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_string
        label: 'Example string'
        description: 'This is an example'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_key: (( .properties.example_string.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```

![Example Product with String Information](img/example-string-tile.png)

#### boolean

Holds a single boolean value

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns the boolean value</td>
  </tr>
</table>

Product template example:

```
property_blueprints:
  - name: example_boolean
    type: boolean
    configurable: true
    default: false

form_types:
  - name: example_form
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_boolean
        label: 'Example boolean'
        description: 'This is an example checkbox'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_key: (( .properties.example_boolean.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```

![Example Product with Boolean Information](img/example-boolean-tile.png)

#### collection

Collections represent the ability to hold multi-property entries. Each "record" will contain values for the configured set of property blueprints.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>An array of hashes whose key are the property name.<br>
  Example: <code>[{album: 'my-album', artist: 'some-artist', explicit: true, genre: 'rock'}]</code></td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_collection
    type: collection
    configurable: true
    property_blueprints:
      - name: album
        type: string
        freeze_on_deploy: true
      - name: artist
        type: string
        freeze_on_deploy: true
      - name: explicit
        type: boolean
      - name: genre
        type: dropdown_select
        configurable: true
        optional: true
        options:
          - name: rock
            label: 'Rock'
          - name: country
            label: 'Country'
          - name: edm
            label: 'Beep Boop PSH'
    default:
      - album: Christmas Carols
        artist: Ops Manatee
        explicit: true
        genre: edm

form_types:
  - name: example_collections_form
    label: 'Collection example'
    description: 'A collection example form'
    property_inputs:
      - reference: .properties.example_collection
        label: 'Albums collection'
        description: 'The albums'
        property_inputs:
          - reference: album
            label: 'Name of the Album'
            description: 'ex Graceland'
          - reference: artist
            label: 'Name of the Artist'
            slug: true
          - reference: explicit
            label: 'Explicit?'
            description: '$#!%&'
          - reference: genre
            label: 'Genre'
            description: Are there others?
```

#### <a id='selector'></a>Selector

Provides the ability to switch between groups of properties.

Selectors are unique in the way that property information is accessed. Ops Manager provides accessors available at the top-level selector property, accessors for retrieving a specific property in an option group, and the ability to provide manifest snippets for a selector option group.

Each selector group may provide manifest snippets. This is because Ops Manager does not support conditionally adding manifest snippets. Therefore, it's difficult to be able to write manifest sections for a selector. A manifest snippet should be present within all option groups, and can

Accessors on Selector Property:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string of the currently selected option group. Example: "Filet Mignon"
  </tr><tr>
  <td>selected_option</td>
  <td>Scopes the accessor to the currently selected option group. <br>
  Does not return meaningful information alone. Must be chained with an accessor available to a Selector Option Group.</td>
  </tr><tr>
  <td>SPECIFIC_SELECTOR_OPTION_GROUP</td>
  <td>Scopes the accessor to a specific selector option group. <br>
  Does not return meaningful information alone. Must be followed with the name and accessor of a specific property in the option group.</td>
  </tr>
</table>

Example, `value`:

`.properties.example_selector.filet_mignon_option.review.value`

Accessors on Selector Option Group:

<table class="nice"><tr>
  <td>parsed_manifest(manifest_snippet_name)</td>
  <td>Returns a hash of the specific manifest snippet</td>
  </tr>
</table>

Example, `selected_option`:

`.properties.example_selector.selected_option.parsed_manifest(my_snippet)`

Here, `my_snippet` corresponds to the name of an entry within each option\_template's named\_manifests section.

Example, option group:


```
property_blueprints:
  - name: example_selector
    type: selector
    configurable: true
    default: Pizza
    freeze_on_deploy: true
    option_templates:
      - name: pizza_option
        select_value: Pizza
        named_manifests:
          - name: my_snippet
            manifest: |
              pizza_toppings:
                pepperoni: (( .properties.example_selector.pizza_option.pepperoni.value ))
                pineapple: (( .properties.example_selector.pizza_option.pineapple.value ))
                other: (( .properties.example_selector.pizza_option.other_toppings.value ))
        property_blueprints:
          - name: pepperoni
            type: boolean
            configurable: true
            freeze_on_deploy: true
          - name: other_toppings
            type: string
            configurable: true
            optional: true
            constraints:
            - must_match_regex: '\A[^!@#$%^&*()]*\z'
              error_message: 'This name cannot contain special characters.'
      - name: filet_mignon_option
        select_value: Filet Mignon
        named_manifests:
          - name: my_snippet
            manifest: |
              rarity: (( .properties.example_selector.filet_mignon_option.rarity_dropdown.value ))
              review: (( .properties.example_selector.filet_mignon_option.review.value ))
              secret_sauce: (( .properties.example_selector.filet_mignon_option.secret_sauce.value ))
        property_blueprints:
          - name: rarity_dropdown
            type: dropdown_select
            configurable: true
            default: rare
            options:
              - name: rare
                label: 'Rare'
              - name: medium
                label: 'Medium'
              - name: well-done
                label: 'Well done'
          - name: secret_sauce
            type: secret
            configurable: true
            optional: true

form_types:
  - name: example_selector_form
    label: 'Selector Example'
    description: 'A selector example form'
    property_inputs:
      - reference: .properties.example_selector
        label: 'Food Choices'
        selector_property_inputs:
          - reference: .properties.example_selector.pizza_option
            label: 'Pizza'
            property_inputs:
              - reference: .properties.example_selector.pizza_option.pepperoni
                label: 'Add Pepperoni'
              - reference: .properties.example_selector.pizza_option.pineapple
                label: 'Add Pineapple'
                description: 'Nothing like an apple, would not buy again'
              - reference: .properties.example_selector.pizza_option.other_toppings
                label: 'Other toppings'
              - reference: .properties.example_selector.pizza_option.cheesy_vm_type
                label: 'Cheesy VM Type'
          - reference: .properties.example_selector.filet_mignon_option
            label: 'Filet Mignon'
            property_inputs:
              - reference: .properties.example_selector.filet_mignon_option.rarity_dropdown
                label: 'How rare?'
                description: 'Extinct.'
              - reference: .properties.example_selector.filet_mignon_option.review
                label: 'Write your review'
                description: '"Contained live jaguar, would not buy again."'
              - reference: .properties.example_selector.filet_mignon_option.secret_sauce
                label: 'Secret Sauce'
                description: 'Probably mayonnaise'
```

#### ldap\_url

Ensures the inputted string matches a URL of the LDAP protocol

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:


```
property_blueprints:
  - name: example_ldap_url
    type: ldap_url
    configurable: true
    default: 'ldap://example.com'

form_types:
  - name: example_form
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_ldap_url
        label: Example ldap_url
        description: 'Configure a property of type ldap_url'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_key: (( .properties.example_ldap_url.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with LDAP Information](img/example-ldap-tile.png)

#### http_url

Holds a HTTP URL

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:


```
property_blueprints:
  - name: example_http_url
    type: http_url
    configurable: true
    default: 'http://example.com'

form_types:
  - name: example_form
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_http_url
        label: Example http_url
        description: 'Configure a property of type http_url'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_key: (( .properties.example_http_url.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Http URL](img/example-http-url-tile.png)

#### rsa\_cert\_credentials

Holds SSL certificate generated from root CA

Accessors:

<table class="nice">
  <tr>
    <td>cert_pem</td>
    <td>Returns a string</td>
  </tr>
  <tr>
      <td>private_key_pem</td>
      <td>Returns a string</td>
  </tr>
  <tr>
      <td>cert_and_private_key_pems</td>
      <td>Returns a string</td>
  </tr>
  <tr>
      <td>public_key_pem</td>
      <td>Returns a string</td>
  </tr>

</table>

Example:

```
property_blueprints:
  # This is configurable by the operator and appears in the form_types section
  - name: example_rsa_cert_credentials_configurable
    type: rsa_cert_credentials
    configurable: true
  # This is not configurable by the operator and is auto-generated
  - name: example_non_configurable_rsa_cert_credentials
    type: rsa_cert_credentials
    configurable: false
    default:
      domains:
        - cell.service.cf.internal
        - *cell.service.cf.internal

form_types:
  - name: example_form
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_rsa_cert_credentials_configurable
        label: Example configurable rsa_cert_credentials
        description: 'Configure a property of type rsa_cert_credentials'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_cert_pem: (( .properties.example_rsa_cert_credentials_configurable.cert_pem ))
          example_private_key_pem: (( .properties.example_rsa_cert_credentials_configurable.private_key_pem ))
          example_public_key_pem: (( .properties.example_rsa_cert_credentials_configurable.public_key_pem ))
          example_non_configurable_cert_pem: (( .properties.example_non_configurable_rsa_cert_credentials_configurable.cert_pem ))
          example_non_configurable_private_key_pem: (( .properties.example_non_configurable_rsa_cert_credentials_configurable.private_key_pem ))
          example_non_configurable_public_key_pem: (( .properties.example_non_configurable_rsa_cert_credentials_configurable.public_key_pem ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with RSA Cert Credentials](img/example-rsa-cert-credentials-tile.png)

#### domain

Ensures the string value is a domain

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:


```
property_blueprints:
  - name: example_domain
    type: domain
    configurable: true
    default: 'example.com'

form_types:
  - name: example_form
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_domain
        label: Example domain
        description: 'Configure a property of type domain'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_key: (( .properties.example_domain.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Domain](img/example-domain-tile.png)

#### wildcard\_domain

Ensures the string value is a domain prefixed with "*."

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr><tr>
  <td>to_wildcard</td>
  <td>Returns a string of the value prefixed with “*.” if not present</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_wildcard_domain
    type: wildcard_domain
    configurable: true
    default: 'example.com'

form_types:
  - name: example_form
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_wildcard_domain
        label: Example Wildcard Domain
        description: 'Configure a property of type wildcard_domain'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_key: (( .properties.example_wildcard_domain.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Wildcard Domain](img/example-wildcard-domain-tile.png)

#### ip\_ranges

Holds an array of strings and ensure the values are IP ranges

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string containing a comma-separated list of IP ranges</td>
  </tr><tr>
  <td>parsed_ip_ranges</td>
  <td>Returns an array of strings for each IP range</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_ip_ranges
    type: ip_ranges
    configurable: true
    default: 1.1.1.1-1.1.1.4,2.2.2.1-2.2.2.4

form_types:
  - name: example_form
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_ip_ranges
        label: Example IP Ranges
        description: 'Configure a property of type ip_ranges'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_ip_ranges.value ))
          example_parsed_ip_ranges: (( .properties.example_ip_ranges.parsed_ip_ranges ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with IP Ranges](img/example-ip-ranges-tile.png)

#### ip\_address

Ensures the string value is an IP address

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_ip_address
    type: ip_address
    configurable: true
    default: 192.168.0.1

form_types:
  - name: example_form
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_ip_address
        label: Example IP Address
        description: 'Configure a property of type ip_address'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_ip_address.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with IP Address](img/example-ip-address-tile.png)

#### email

Ensures the string value is formatted as an email address

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_email
    type: email
    configurable: true
    default: 'john@example.com'

form_types:
  - name: example_form
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_email
        label: Example Email
        description: 'Configure a property of type email'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_email.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Email](img/example-email-tile.png)

#### port

Holds a single integer value

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns an integer</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_port
    type: port
    configurable: true
    default: 3000

form_types:
  - name: example_port
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_port
        label: Example Port
        description: 'Configure a property of type port'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_port.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Port](img/example-port-tile.png)

#### integer

Holds a single integer value

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns an integer</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_integer
    type: integer
    configurable: true
    default: 100

form_types:
  - name: example_integer
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_integer
        label: Example Integer
        description: 'Configure a property of type integer'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_integer.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Integer](img/example-integer-tile.png)

#### text

Holds a single string value

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_text
    type: text
    configurable: true
    default: |
      Example
      Text

form_types:
  - name: example_text
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_text
        label: Example Text
        description: 'Configure a property of type text'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_text.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Text](img/example-text-tile.png)

#### smtp\_authentication

Holds string with a possible value of plain, login, or cram_md5

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string with possible value of <code>plain</code>, <code>login</code>, <code>cram_md5</code></td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_smtp_authentication
    type: smtp_authentication
    configurable: true
    default: plain

form_types:
  - name: example_text
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_smtp_authentication
        label: Example SMTP Authentication
        description: 'Configure a property of type smtp_authentication'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_smtp_authentication.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with SMTP Authentication](img/example-smtp-authentication-tile.png)

#### network\_address

Ensure the string is a network address

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_network_address
    type: network_address
    configurable: true
    default: 'localhost'

form_types:
  - name: example_network_address
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_network_address
        label: Example Network Address
        description: 'Configure a property of type network_address'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_network_address.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Network Address](img/example-network-address-tile.png)

#### network\_address\_list

Holds an array of new addresses

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string containing a comma separated list of network addresses</td>
  </tr><tr>
  <td>parsed_network_addresses</td>
  <td>Returns an array of strings for each network address</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_network_address_list
    type: network_address_list
    configurable: true
    default: 'localhost,1.1.1.1'

form_types:
  - name: example_network_address_list
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_network_address_list
        label: Example Network Address List
        description: 'Configure a property of type network_address_list'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_network_address_list.value ))
          parsed_network_addresses: (( .properties.example_network_address_list.parsed_network_addresses ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Network Address List](img/example-network-address-list-tile.png)

#### string\_list

Holds an array of strings

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr><tr>
  <td>parsed_strings</td>
  <td>Returns an array of strings for each string entry</td>
  </tr><tr>
  <td>parsed_regex</td>
  <td>Returns a string containing a regex of the format “^(string1|string2|string3)$” where the value of this property is“string1,string2,string3”</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_string_list
    type: string_list
    configurable: true
    default: foo,bar,baz

form_types:
  - name: example_string_list
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_string_list
        label: Example String List
        description: 'Configure a property of type string_list'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_string_list.value ))
          parsed_strings: (( .properties.example_string_list.parsed_strings ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with String List](img/example-string-list-tile.png)

#### ca\_certificate

Holds a string value

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_ca_certificate
    type: ca_certificate
    configurable: true
    default: |
      -- BEGIN FAKE CERT --
      -- END FAKE CERT --
form_types:
  - name: example_ca_certificate
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_ca_certificate
        label: Example CA Certificate
        description: 'Configure a property of type ca_certificate'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_ca_certificate.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with CA Certificate](img/example-ca-certificate-tile.png)

#### multi\_select\_options

Holds an array of selected string values

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns an array of strings for the selected options</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_multi_select_options
    type: multi_select_options
    configurable: true
    default: ['earth', 'mercury']
    options:
    - name: mercury
      label: 'label for mercury'
    - name: venus
      label: 'label for venus'
    - name: earth
      label: 'label for earth'

form_types:
  - name: example_multi_select_options
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_multi_select_options
        label: Example Multi-Select Options
        description: 'Configure a property of type multi_select_options'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_multi_select_options.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Multi-Select Options](img/example-multi-select-options-tile.png)

#### dropdown\_select

Holds an array of strings selected string values

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
property_blueprints:
 - name: example_dropdown_select
   type: dropdown_select
   configurable: true
   default: kiwi
   options:
     - name: kiwi
       label: 'label for kiwi'
     - name: lime
       label: 'label for lime'
     - name: avocado
       label: 'label for avocado'
form_types:
  - name: example_dropdown
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_dropdown_select
        label: Example Dropdown Select
        description: 'Configure a property of type dropdown_select'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_dropdown_select.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Multi-Select Options](img/example-dropdown-select-tile.png)

#### vm\_type\_dropdown

Holds single string value selected from allowed vm_types

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_vm_type_dropdown
    type: vm_type_dropdown
    configurable: true

form_types:
  - name: example_vm_type_dropdown
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_vm_type_dropdown
        label: Example VM Type Dropdown
        description: 'Configure a property of type vm_type_dropdown'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_vm_type_dropdown.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with VM Types Dropdown](img/example-vm-type-dropdown-tile.png)

#### disk\_type\_dropdown

Holds single string value selected from allowed disk_types

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_disk_type_dropdown
    type: disk_type_dropdown
    configurable: true

form_types:
  - name: example_disk_type_dropdown
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_disk_type_dropdown
        label: Example Disk Type Dropdown
        description: 'Configure a property of type disk_type_dropdown'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_disk_type_dropdown.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Disk Types Dropdown](img/example-disk-type-dropdown-tile.png)

#### uuid

Holds a string uuid value

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_uuid
    type: uuid
    configurable: true

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_uuid.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```

#### service\_network\_az\_multi\_select

Holds an arrays of string value selected from allowed azs

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns an array of strings for the selected options</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: service_instance_azs
    type: service_network_az_multi_select
    configurable: true
    optional: false

form_types:
  - name: example_service_network_az_multi_select
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.service_instance_azs
        label: Example Service Network AZ Multi-Select
        description: 'Configure a property of type service_network_az_multi_select'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.service_instance_azs.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Service Network AZ Multi-Select](img/example-service-network-az-multi-select-tile.png)

#### service\_network\_az\_single\_select

Holds a single string value selected from allowed azs

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_service_network_az_single_select
    type: service_network_az_single_select
    configurable: true
    optional: false

form_types:
  - name: example_service_network_az_single_select
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.service_instance_azs
        label: Example Service Network AZ Single-Select
        description: 'Configure a property of type service_network_az_single_select'

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.service_network_az_single_select.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Service Network AZ Single-Select](img/example-service-network-az-single-select-tile.png)

#### secret

Holds a single string value

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
property_blueprints:
  - name: example_secret
    type: secret
    configurable: true

form_types:
  - name: example_secret
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_secret
        label: Example Secret
        description: 'Configure a property of type secret'
        display_type: text_area

job_types:
  - name: example-job
    max_in_flight: 1
    resource_label: Example Operation
    single_az_only: true
    templates:
      - name: example-template
        release: example-release
        manifest: |
          example_value: (( .properties.example_secret.value ))
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    instance_definition:
      name: instances
      configurable: true
      default: 1
```
![Example Product with Secret](img/example-secret-tile.png)

Adding an additional key to the property input for a secret will allow you to use a multi-line credential.

```
form_types:
  - name: example_secret
    label: 'Example form'
    description: 'An example form'
    property_inputs:
      - reference: .properties.example_secret
        label: Example Secret
        description: 'Configure a property of type secret'
        display_type: text_area
```

![Example Product with Secret](img/example-secret-text-area-tile.png)



