---
title: Securing Service Credential Delivery with PAS CredHub
owner: Services
---

This topic describes how to develop your Pivotal Cloud Foundry (PCF) service tile to support secure service instance (SSI) credentials using [runtime CredHub](http://docs.pivotal.io/pivotalcf/2-0/credhub/#runtime).

## <a id="background"></a> Background

When developers bind an app to a service instance, the binding typically includes _binding credentials_ required to access the service.

In PCF 2.0 and later, service brokers can store these credentials in runtime CredHub and apps can retrieve the service credentials from CredHub. This secures service instance credential management by avoiding the following:

* Leaking environment variables to logs, which increases risk of disclosure
* Sending credentials between components, which increases risk of disclosure
* Requiring users to rotate credentials through the environment, which requires container recreation

To store credentials in runtime CredHub, your service tile needs to support the following:

* Discover the location of CredHub.
* Provide this CredHub location to the broker app. The service broker uses the provided location to store binding credentials in CredHub.
* Enable operators to select the SSI credentials option in the tile UI. 

The sections below describe an example implementation of this functionality for your service tile.

## <a id="step1"></a> Step 1: Modify Your BOSH Release

To use runtime CredHub, your service tile needs to retrieve the location of the CredHub server, which is published in the Pivotal Application Service (PAS) tile, through a BOSH link.

<p class="note"><strong>Note</strong>: BOSH links let multiple jobs share deployment-time configuration properties. This helps to avoid redundant configurations in BOSH releases and deployment manifests. For more information about BOSH links, see <a href="http://docs.pivotal.io/tiledev/1-12/release-notes-1-11.html#bosh-links">BOSH Links</a>.</p>

### <a id="spec"></a> Update Spec File and Templates

The location of runtime CredHub is stored in the `credhub.internal_url` and `credhub.port` properties of the PAS tile. To enable your service tile to retrieve these CredHub-provided properties, add a `consumes:` section with the BOSH link from the PAS tile to the spec file of the BOSH job that will use them and edit the job's templates to access the values in the link.

For information about using BOSH links in the spec file and templates of a job and consuming shared properties provided by other jobs, see [Links in Spec Files](http://docs.pivotal.io/tiledev/1-12/release-notes-1-11.html#bosh-links-spec) and [Links in Templates](http://docs.pivotal.io/tiledev/1-12/release-notes-1-11.html#bosh-links-template).

### <a id="manifest"></a> Update Deployment Manifest

In the BOSH release for your tile, edit the deployment manifest `.yml` file so that it contains the BOSH link to CredHub. For more information about using BOSH links in deployment manifests, see [Links in Manifests](http://docs.pivotal.io/tiledev/1-12/release-notes-1-11.html#bosh-links-manifest).

## <a id="step2"></a> Step 2: Enable Your Tile to Find Runtime CredHub

To enable your service tile to discover runtime CredHub, edit your product template to consume the location of CredHub. See the following example:

```
job_types:
- name: JOB-NAME
  resource_label: LABEL-NAME
  templates:
  - name: TEMPLATE-NAME
    release: RELEASE-NAME
    consumes: |
      credhub: {from: credhub, deployment: "(( ..cf.deployment_name ))"}
```

You can also use the address from the BOSH link to verify that the CredHub server is available at that address during tile installation. See the following example:

```
properties:
      aliases:
        (( dig credhub.service.cf.internal @169.256.0.2 )):
        - '*.credhub.(( ..cf.credhub.network )).(( ..cf.deployment_name )).bosh'
```

In the example, the runtime CredHub instance can be accessed at `credhub.service.cf.internal`. If your broker runs as an app, you can resolve this address with BOSH DNS. If your broker runs on a VM with a Consul agent, you can resolve the address with Consul. Alternatively, from a VM, you can resolve the address with `dig credhub.service.cf.internal @169.256.0.2`. This command uses the PAS BOSH DNS server to do lookup.

## <a id="step3"></a> Step 3: Provide Operators with the Choice to Use CredHub

To provide operators with the choice to select the SSI credentials option, edit your product template. See the following example:

```
form_types:
- name: FORM-NAME
  label: LABEL-NAME
  description: DESCRIPTION
  property_inputs:
  - reference: .JOB-NAME.secure_credentials
    label: Secure service instance credentials
    description: "When checked, service instance credentials will be stored in CredHub. Enable only when installing with PCF 2.0 or greater and this feature is also enabled in the PAS tile."

property_blueprints:
  - name: hidden_credhub_selector
    type: selector
    configurable: false
    default: "default"
    option_templates:
      - name: default_option
        select_value: "default"
        named_manifests:
          - name: consumes_section_credhub_disabled
            manifest: |
              credhub: {}
          - name: consumes_section_credhub_enabled
            manifest: |
              credhub: {from: credhub, deployment: "(( ..cf.deployment_name ))"}

job_types:
- name: JOB-NAME
  resource_label: LABEL-NAME
  templates:
  - name: TEMPLATE-NAME
    release: RELEASE-NAME
    consumes: |
      "(( secure_credentials.value ? .properties.hidden_credhub_selector.selected_option.parsed_manifest(consumes_section_credhub_enabled) : .properties.hidden_credhub_selector.selected_option.parsed_manifest(consumes_section_credhub_disabled) ))"
  errand: true
  resource_definitions:
     ...
  property_blueprints:
  ...
  - name: secure_credentials
    type: boolean
    configurable: true
    default: false
```

## <a id="step4"></a> Step 4: Store Binding Credentials in CredHub

When the Cloud Controller (CC) receives a request to bind a service instance to an app, it forwards the request to the service broker. The service broker then returns the binding credentials that allow access to the service.

To enable your service broker to store binding credentials in CredHub, do the following:

1. In your service broker code, locate where your broker handles binding requests from the CC.

1. Because all API requests to CredHub must include an authentication method, you need to determine how your service broker authenticates with CredHub. The authentication method depends on how your tile deploys the service broker:
  * **Service broker pushed as a Cloud Foundry app**: Broker authenticates to CredHub using mutual TLS.
  * **Service broker runs outside of PAS, for example, in a BOSH-managed VM**: Broker authenticates to CredHub, using OAuth2 tokens from UAA. All calls to CredHub API must include an authorization header.

    For more information about CredHub authentication, see the [Authentication](https://credhub-api.cfapps.io/#authentication) section of the CredHub API documentation.

1. Update your code to store your binding credentials in CredHub using the CredHub API endpoint for setting the `json` credential type with a user-provided value. See the following example for how to format your API call:

    ```
  curl "https://CREDHUB.INTERNAL_URL:CREDHUB.PORT/api/v1/data" \
  -X PUT \
  -d '{
      "name": "/c/CLIENT-IDENTIFIER/SERVICE-IDENTIFIER/BINDING-GUID/CREDENTIAL-NAME",
      "type": "json",
      "value": {
        "uri": "SERVICE-URL",
        "username": "USERNAME",
        "password": "PASSWORD"
      }
     }' \
  -H 'Content-type: application/json'
    ```
  Where:
  * `CREDHUB.INTERNAL_URL` and `CREDHUB.PORT` are the address and port of CredHub. `CREDHUB.INTERNAL_URL`resolves to  `credhub.service.cf.internal` and the default port is 8844.
  * `CLIENT-IDENTIFIER` is a value provided by the service broker to uniquely identify the broker.
  * `SERVICE-IDENTIFIER` is the name of the service offering as shown in the services catalog.
  * `BINDING-GUID` is the GUID created by the CC and passed to the service broker in the service binding request.
  * `CREDENTIAL-NAME` is a value provided by the service broker to name the credential.
  * `SERVICE-URL` is the URL of your service.
  * `USERNAME` and `PASSWORD` are your binding credentials.

    For further reference, see the [Set Credentials](https://credhub-api.cfapps.io/#set-credentials) section of the CredHub API docs.

1. Modify your service broker so that it returns a reference to the stored credentials in response to the binding request from the CC. Return the credentials as a single key `credhub-ref` with its value formatted as `/c/CLIENT-IDENTIFIER/SERVICE-IDENTIFIER/BINDING-GUID/CREDENTIAL-NAME`. For example, the binding response might look like the following:

    ```
  {
    "credentials": {
      "credhub-ref": "/c/example-service-broker/example-service/faa677f5-25cd-4f1e-8921-14a9d5ab48b8/credentials"
    }
  }
    ```