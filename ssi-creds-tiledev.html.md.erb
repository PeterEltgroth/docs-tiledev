---
title: Securing Service Credential Delivery with PAS CredHub
owner: Services
---

This topic describes how to develop your Pivotal Cloud Foundry (PCF) service tile to support secure service instance credentials (SSI) using [runtime CredHub](http://docs.pivotal.io/pivotalcf/2-0/credhub/#runtime).

## <a id="background"></a> Background

When developers bind an app to a service instance, the binding typically includes credentials required to access the service.

In PCF 2.0, service brokers can store these credentials in runtime CredHub and apps can retrieve the service credentials from CredHub. This secures service instance credential management by avoiding the following:

* Leaking environment variables to logs, which increases risk of disclosure
* Sending credentials between components, which increases risk of disclosure
* Requiring users to rotate credentials through the environment, which requires container recreation

### <a id="step1"></a> Step 1: Update Your BOSH Release

1. In the BOSH release for your tile, edit the deployment manifest `.yml` file so that it contains a BOSH link to CredHub. See the following example for how to format your BOSH link. 

```
- name: credhub
  type: credhub
  optional: true
```

### <a id="step2"></a> Step 2: Store Binding Credentials in CredHub

When the Cloud Controller (CC) receives a request to bind a service instance to an app, it forwards the request to the service broker. The service broker then returns the _binding credentials_ that allow access to the service.

Service brokers that support binding of service instances to applications typically return a set of binding credentials in response to a binding request from Cloud Controller (CC). 

1. In your service broker code, locate where your broker handles binding requests from the CC.

1. Update your code to store your binding credentials in CredHub using the `set credential` API endpoint with the `json` credential type. See the following example for how to format your API call. For further reference, see the [Set Credentials](https://credhub-api.cfapps.io/#set-credentials) section of the CredHub API docs.

	```
	curl "https://credhub.cf.example.com/api/v1/data" \
  -X PUT \
  -d '{
      "name": "/c/CLIENT-IDENTIFIER/SERVICE-IDENTIFIER/BINDING-GUID/CREDENTIAL-NAME",
      "type": "json",
      "value": {
        "uri": "SERVICE-URL",
        "username": "user",
        "password": "secret"
      }
     }' \
  -H 'Content-type: application/json'
  	```
Where:
	* `CLIENT-IDENTIFIER` is a value provided by the service broker to uniquely identify the broker.
	* `SERVICE-IDENTIFIER` is the name of the service offering as shown in the services catalog.
	* `BINDING-GUID` is the GUID created by CC and passed to the service broker in the service binding request.
	* `CREDENTIAL-NAME` is a value provided by the service broker to name the credential.
	* `SERVICE-URL` is the URL of your service.

1. Modify your service broker so that it returns a reference to the stored credentials in response to the binding request from CC. To facilitate the retrieval of credentials by bound applications, the credentials returned to CC should contain the single key “credhub-ref”, and the name of the stored credential as the value for that key. That binding response might look like this:

 	```
	{
	  "credentials": {
	    "credhub-ref": "((/c/my-service-broker/my-service/faa677f5-25cd-4f1e-8921-14a9d5ab48b8/credentials))"
	  }
	}
	```

<p class="note"><strong>Note</strong>: Service brokers that are deployed as Cloud Foundry applications are recommended to use the instance identity credentials to authenticate with CredHub. Service brokers that are deployed as a platform instance or third party service must use a UAA client credential. For more information, see the <a href="https://credhub-api.cfapps.io/#authentication">Authentication</a> section of the CredHub API documentation.</p>

### <a id="step3"></a> Step 3: Engineer your service broker to discover the location of PAS CredHub instances 

1. Edit your BOSH instance in the following way to validate whether PAS CredHub has been deployed.

```
properties:
      aliases:
        (( dig credhub.service.cf.internal @169.256.0.2 )):
        - '*.credhub.(( ..cf.credhub.network )).(( ..cf.deployment_name )).bosh'
```

The PAS CredHub instance can be accessed at `credhub.service.cf.internal`. If your broker runs as an app, you can resolve this address with BOSH DNS. If your broker runs on a VM with a consul agent, you can resolve the address with consul. Alternatively, from a VM, you can resolve the address with `dig credhub.service.cf.internal @169.256.0.2`. This command uses the PAS BOSH DNS server to do lookup. 

### <a id="step4"></a> Step 4: Engineer your Broker to provide operators with the choice to use CredHub to store Service Instance Credentials


1. Edit your Property Template in the following way to provide operators with the choice to select the option to support secure service instance credentials

```
form_types:
- name: scs_configuration
  label: LABEL-NAME
  description: DESCRIPTION
  property_inputs:
  - reference: .deploy-service-broker.secure_credentials
    label: Secure service instance credentials
    description: "When checked, service instance credentials will be stored in CredHub. Enable only when installing with PCF 2.0 or greater and this feature is also enabled in the PAS tile."

property_blueprints:
  - name: hidden_credhub_selector
    type: selector
    configurable: false
    default: "default"
    option_templates:
      - name: default_option
        select_value: "default"
        named_manifests:
          - name: consumes_section_credhub_disabled
            manifest: |
              credhub: {}
          - name: consumes_section_credhub_enabled
            manifest: |
              credhub: {from: credhub, deployment: "(( ..cf.deployment_name ))"}

job_types:
- name: deploy-service-broker
  resource_label: Broker Deployer
  templates:
  - name: deploy-service-broker
    release: SERVICE-BROKER-RELEASE-NAME
    consumes: |
      "(( secure_credentials.value ? .properties.hidden_credhub_selector.selected_option.parsed_manifest(consumes_section_credhub_enabled) : .properties.hidden_credhub_selector.selected_option.parsed_manifest(consumes_section_credhub_disabled) ))"
  errand: true
  resource_definitions:
     ...
  property_blueprints:
  ...
  - name: secure_credentials
    type: boolean
    configurable: true
    default: false
```