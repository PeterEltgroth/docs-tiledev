---
title: Property and Template References
owner: Ops Manager
---

<strong><%= modified_date %></strong>


## <a id="overview"></a>Overview

A tile's `metadata` subdirectory contains a product template file in `.yml` format. The product template file specifies how the tile interface collects configurable properties from the user, and how Ops Manager incorporates these properties into its deployment manifest.

You can modify your tile's product template in many different ways. Two important concepts to understand are what the product template contains and how to modify it to include different properties. 

This topic explains these two concepts and gives examples of different configuration options for tiles.

## <a id="product-template"></a>Understanding the Product Template

The product template, a `.yml` file in the tile's `metadata` subdirectory, includes or points to the following:

* **Metadata**: High level information about your tile
* **Dependencies**: How to specify product dependencies
* **Property Blueprints**: The building blocks of representing values
* **Form Types**: Exposing property blueprints into generated forms
* **Jobs**

For the purpose of explanation, examples that refer to the product template use the [PCF example tile](https://github.com/pivotal-cf-experimental/ops-manager-example), a functional tile provided by the Ops Manager engineering team that deploys the NGINX web server.

For more information about product template configuration, see [Top Level Properties](#top-level). 

To learn how to configure your tile's forms, see [Form Properties](#form-properties).

## <a id='property-values'></a>Designating Property Values

Within the product template, there are two sections with `manifest` snippets. These sections are:

* **`form_types`**: This defines the tile interface, or how users of your tile view and interact with different tile features.
* **`job_types`**: This defines the jobs that the manifest deploys, or what the tile does in response to user input, developer input, or at set intervals. 

You can use special expressions in these snippets to include property values that are otherwise not already known to the tile, such as user provided configurable properties or dynamically generated system properties. These special expressions take two forms:

### <a id="double-parens"></a> Double Parentheses Expressions

Double-parentheses expressions, such as `(( PROPERTY-VALUE ))` designate property values that Ops Manager fills in when it generates the deployment manifest, after the user clicks **Apply Changes**. These values include configurable properties and properties supplied by Ops Manager.

To include these properties in a manifest snippet, use "double-parens" syntax, which consists of a variable name surrounded by two sets of parentheses:

```
    manifest: |
      pizza_toppings:
        peppers: (( .properties.example_selector.pizza_option.peppers.value ))
```

### <a id="triple-parens"></a> Triple Parentheses Expression

Triple-parentheses expressions, such as `((( PROPERTY-VALUE )))` designate property values that BOSH supplies when it deploys instances of the tile service. For example, CredHub credentials are designated in triple parentheses.

When Ops Manager parses a product template and BOSH parses a manifest, they both fill in properties designated by double-parens syntax.

Some property values in a product template, such as CredHub credentials, must be filled in by BOSH on the BOSH Director VM, rather than by Ops Manager.

To include these BOSH deploy-time properties in a manifest snippet, use "triple-parens" notation:

```
    manifest: |
      credhub:
        concatenated_password: prefix-((( credhub-password )))-suffix
        password: ((( credhub-password )))

```

Ops Manager strips the outer parentheses from these expressions and
includes the resulting double-parens expressions in the manifest it generates, for BOSH to evaluate at deploy time.

For more information about product properties, continue reading [Referencing Properties](#property-refs).

### <a id='property-refs'></a>Referencing Properties

Each property is represented by two segments:

* The location of the property. 
<!-- GIVE AN EXAMPLE --> 
* **Accessors**: The information from the property you want to access.

Using these two segments, you can write an expression as: 

````
(( LOCATION_OF_PROPERTY.ACCESSOR ))
```

#### <a id="property-location"></a>Referencing a Location

The method of referencing the location of the property varies. The following table describes the different methods of referencing a property and includes explanatory text: 

<table class="nice"><tr>
   <td>.properties.top_level_property</td>
   <td>Refers to the property blueprint called "top_level_property" and found in the global list of properties of the same product
   </tr><tr>
   <td>.job_one.job_level_property</td>
   <td>Refers to the property blueprint called "job_level_property" and found in the list of properties of the job "job_one" of the same product</td>
   </tr><tr>
   <td>job_level_property</td>
   <td>Refers to the property blueprint called "top_level_property" and found in the same product and job whose manifest is currently being evaluated</td>
   </tr><tr>
   <td>..other_product.properties.top_level_property</td>
   <td>Refers to the property blueprint called "top_level_property" and found in the global list of properties of the product "other_product"</td>
   </tr><tr>
   <td>..other_product.job_two.job_level_property</td>
   <td>Refers to the property blueprint called "job_level_property" and found in the list of properties of the job "job_one" of the product "other_product"</td>
   </tr>
</table>

#### <a id="accessor-location"></a>Referencing an Accessor

Accessors vary between property blueprint types. The following example uses the property blueprint type `string` with its one accessor, `value`. A valid double-parentheses expression to access the value of this property (assuming it is top-level, and has the name `example-string`) would look like:

```
(( .properties.example-string.value ))
```

Ops Manager allows empty arrays in double-parentheses expressions. For example:

```
(( .properties.example-string.value || [] ))
```

For more information about the available properties and their accessors, see the [Property Blueprint Reference](#property-blueprints).

### <a id='dollar'></a>Dollar Contexts

Outside of properties, you can also retrieve information about various configuration details of your product and Ops Manager.

* **$ops\_manager**: Any product can use this to obtain information about specific OpsManagers.
* **$director**: Any product can use this to obtain information about the Director.
* **$self**: Your own product uses this to obtain information about its configuration.

<!--WE SHOULD HAVE AN EXAMPLE HERE ^^-->

<!--IN ALL CASES OF "PROVIDES" IN THE TABLES BELOW, SHOULD WE BE SAYING "RETURNS?"-->

#### $ops\_manager

<table class="nice"><tr>
  <td>ca_certificate</td>
  <td>Provides the root CA cert that is used to sign the Director VM</td>
  </tr><tr>
  <td>trusted_certificates</td>
  <td>Provides a list of certificates that the Director applies to all VMs</td>
  </tr><tr>
  <td>http_proxy</td>
  <td>Provides the comma separated values (CSV) that are entered when Ops Manager traffic is directed to an HTTP Proxy</td>
  </tr><tr>
  <td>https_proxy</td>
  <td>Provides the CSVs that are entered when Ops Manager traffic is directed to an HTTPS Proxy</td>
  </tr><tr>
  <td>no_proxy</td>
  <td>Provides the CSVs that should not go through a proxy</td></tr>
</tr>
</table>

#### $director

<table class="nice"><tr>
  <td>deployment_ip</td>
  <td>Provides the IP address where the BOSH Director is deployed</td>
  </tr><tr>
  <td>username</td>
  <td>Provides the username for the Director VM</td>
  </tr>
  <tr>
  <td>password</td>
  <td>Provides the password for the Director VM</td>
  </tr>
  <tr>
  <td>ntp_servers</td>
  <td>Provides a list of Network Time Protocol (NTP) servers that the Director deploys</td>
  </tr>
  <tr>
  <td>ca_public_key</td>
  <td>Provides the public key that is used to sign the Director VM</td>
  </tr>
  <tr>
  <td>hostname</td>
  <td>Provides the hostname for the Director VM</td>
  </tr>
  <tr>
  <td>tld</td>
  <td>Returns the string <code>bosh</code> as the top-level domain (TLD) of the BOSH Director</td>
  </tr>
  <tr>
  <td>bosh_metrics_forwarder_client_name</td>
  <td>Provides the BOSH Metrics Forwarder client name</td>
  </tr>
  <tr>
  <td>bosh_metrics_forwarder_client_secret</td>
  <td>Provides the BOSH Metrics Forwarder client secret</td>
  </tr>
  <tr>
  <td>dns_release_present</td>
  <td>Exposes the Director configuration for <code>disable_dns_release</code></td>
</tr>
</table>

#### $self

<!--INSTEAD OF "PRODUCT," SHOULD WE SAY "TILE?" IT SEEMS LIKE THE USE OF "PRODUCT" VS. "TILE" IS ARBITRARY AND CONFUSING.-->

<table class="nice"><tr>
  <td>uaa_client_name</td>
  <td>Provides the UAA client name created for your product to communicate with the BOSH Director</td>
  </tr><tr>
  <td>uaa_client_secret</td>
  <td>Provides the UAA client secret created for your product to communicate with the BOSH Director</td>
  </tr><tr>
  <td>service_network</td>
  <td>Provides the name of the service network assigned to your product</td>
  </tr><tr>
  <td>stemcell_version</td>
  <td>Provides the version of the stemcell your product uses</td>
  </tr>
</table>

### <a id='property-blueprints'></a>Property Blueprint Reference

#### string

Holds a single string value.

<!--THE EXAMPLE BELOW SPECIFIES NO SPECIAL CHARACTERS OR NUMBERS. IS THAT TRUE FOR ALL OF THE STRING ACCESSORS? OR IS IT JUST AN EXAMPLE? IF IT'S TRUE FOR ALL STRING ACCESSORS, WE SHOULD UPDATE THE INTRO TEXT ON LINE 178 TO REFLECT THAT.-->

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns the string value</td>
  </tr>
</table>

Product template example:

```
- name: example_string
  type: string
  configurable: true
  default: 'Hello world'
  constraints:
  - must_match_regex: '\A[^!@#$%^&*()]*\z'
    error_message: 'This name cannot contain special characters.'
  - must_match_regex: '\A[^0-9]*\z'
    error_message: 'This name cannot contain digits.'
```

#### boolean

Holds a single boolean value.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns the boolean value</td>
  </tr>
</table>

Example:

```
- name: example_boolean
  type: boolean
  configurable: true
  default: false
```

#### collection

Collections represent the ability to hold multi-property entries. Each "record" contains values for the configured set of property blueprints.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>An array of hashes whose key is the property name.<br>
  Example: <code>[{album: 'my-album', artist: 'some-artist', explicit: true, genre: 'rock'}]</code></td>
  </tr>
</table>

Example:

```
- name: example_collection
  type: collection
  configurable: true
  property_blueprints:
    - name: album
      type: string
      freeze_on_deploy: true
    - name: artist
      type: string
      freeze_on_deploy: true
    - name: explicit
      type: boolean
    - name: genre
      type: dropdown_select
      configurable: true
      optional: true
      options:
        - name: rock
          label: 'Rock'
        - name: country
          label: 'Country'
        - name: edm
          label: 'Beep Boop PSH'
  default:
    - album: Christmas Carols
      artist: Ops Manatee
<!--CUTE ^^ -->
      explicit: true
      genre: edm
```

#### <a id='selector'></a>Selector

Selectors provide the ability to switch between groups of properties.

Selectors access property information in a unique way. Ops Manager provides accessors available at the top-level selector property, accessors for retrieving a specific property in an option group, and the ability to provide manifest snippets for a selector option group.

A manifest snippet should be present within all option groups. Each selector group may provide manifest snippets. This is because Ops Manager does not support conditionally adding manifest snippets. Because of this restriction, it is difficult to write manifest sections for a selector. 

Accessors on the Selector Property:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string of the currently selected option group. Example: "Filet Mignon"
  </tr><tr>
  <td>selected_option</td>
  <td>Scopes the accessor to the currently selected option group. <br>
  By itself, this accessor does not return useful information. Chain it with an accessor available to a Selector Option Group.</td>
  </tr><tr>
  <td>SPECIFIC_SELECTOR_OPTION_GROUP</td>
  <td>Scopes the accessor to a specific selector option group. <br>
  By itself, this accessor does not return useful information. Follow it with the name and accessor of a specific property in the option group.</td>
  </tr>
</table>

Example, `value`:

`.properties.example_selector.filet_mignon_option.review.value`

Accessors on the Selector Option Group:

<table class="nice"><tr>
  <td>parsed_manifest(manifest_snippet_name)</td>
  <td>Returns a hash of the specific manifest snippet</td>
  </tr>
</table>

Example, `selected_option`:

`.properties.example_selector.selected_option.parsed_manifest(my_snippet)`

In this example, `my_snippet` corresponds to the name of an entry within each `option_template`'s `named_manifests` section.

Example, option group:

```
- name: example_selector
  type: selector
  configurable: true
  default: Pizza
  freeze_on_deploy: true
  option_templates:
    - name: pizza_option
      select_value: Pizza
      named_manifests:
        - name: my_snippet
          manifest: |
            pizza_toppings:
              pepperoni: (( .properties.example_selector.pizza_option.pepperoni.value ))
              pineapple: (( .properties.example_selector.pizza_option.pineapple.value ))
              other: (( .properties.example_selector.pizza_option.other_toppings.value ))
      property_blueprints:
        - name: pepperoni
          type: boolean
          configurable: true
          freeze_on_deploy: true
        - name: other_toppings
          type: string
          configurable: true
          optional: true
          constraints:
          - must_match_regex: '\A[^!@#$%^&*()]*\z'
            error_message: 'This name cannot contain special characters.'
    - name: filet_mignon_option
      select_value: Filet Mignon
      named_manifests:
        - name: my_snippet
          manifest: |
            rarity: (( .properties.example_selector.filet_mignon_option.rarity_dropdown.value ))
            review: (( .properties.example_selector.filet_mignon_option.review.value ))
            secret_sauce: (( .properties.example_selector.filet_mignon_option.secret_sauce.value ))
      property_blueprints:
        - name: rarity_dropdown
          type: dropdown_select
          configurable: true
          default: rare
          options:
            - name: rare
              label: 'Rare'
            - name: medium
              label: 'Medium'
            - name: well-done
              label: 'Well done'
        - name: secret_sauce
          type: secret
          configurable: true
          optional: true
```

#### ldap\_url

Ensures the inputted string matches a URL of the LDAP protocol.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:


```
- name: example_ldap_url
  type: ldap_url
  configurable: true
  default: 'ldap://example.com'
```

#### domain

Ensures the string value is a domain.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:


```
- name: example_domain
  type: domain
  configurable: true
  default: 'example.com'
```

#### wildcard\_domain

Ensures the string value is a domain prefixed with "*.".

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr><tr>
  <td>to_wildcard</td>
  <td>Returns a string of the value prefixed with “*.” if not present</td>
  </tr>
</table>

Example:

```
- name: example_wildcard_domain
  type: wildcard_domain
  configurable: true
  default: '*.example.com'
```

#### ip\_ranges

Holds an array of strings and ensure the values are IP ranges.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string containing a comma-separated list of IP ranges</td>
  </tr><tr>
  <td>parsed_ip_ranges</td>
  <td>Returns an array of strings for each IP range</td>
  </tr>
</table>

Example:

```
- name: example_ip_ranges
  type: ip_ranges
  configurable: true
  default: '1.1.1.1-1.1.14,2.2.2.1-2.2.2.4'
```

#### ip\_address

Ensures the string value is an IP address.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
- name: example_ip_address
  type: ip_address
  configurable: true
  default: '192.168.0.1'
```

#### email

Ensures the string value is formatted as an email address.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
- name: example_string
  type: email
  configurable: true
  default: 'john@example.com'
```

#### port

Holds a single integer value.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns an integer</td>
  </tr>
</table>

Example:

```
- name: example_port
  type: port
  configurable: true
  default: 3000
```

#### integer

Holds a single integer value.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns an integer</td>
  </tr>
</table>

Example:

```
- name: example_integer
  type: integer
  configurable: true
  default: 100
```

#### text

Holds a single string value.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
- name: example_text
  type: text
  configurable: true
  default: |
    Example
    Text
```

#### smtp\_authentication

Holds string with a possible value of `plain`, `login`, or `cram_md5`.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string with possible value of <code>plain</code>, <code>login</code>, <code>cram_md5</code></td>
  </tr>
</table>

Example:

```
- name: example_smtp_authentication
  type: smtp_authentication
  configurable: true
  default: plain
```

#### network\_name

Ensures the string is a network name.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
- name: example_network_name
  type: network_name
  configurable: true
  default: 'ExampleNetwork'
```

#### network\_address

Ensures the string is a network address.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
- name: example_network_address
  type: network_address
  configurable: true
  default: 'localhost'
```

#### network\_address\_list

Holds an array of new addresses.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string containing a comma separated list of network addresses</td>
  </tr><tr>
  <td>parsed_network_addresses</td>
  <td>Returns an array of strings for each network address</td>
  </tr>
</table>

Example:

```
- name: example_network_address_list
  type: network_address_list
  configurable: true
  default: 'localhost,1.1.1.1'
```

#### string\_list

Holds an array of strings.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr><tr>
  <td>parsed_strings</td>
  <td>Returns an array of strings for each string entry</td>
  </tr><tr>
  <td>parsed_regex</td>
  <td>Returns a string containing a regex of the format “^(string1|string2|string3)$” where the value of this property is“string1,string2,string3”</td>
  </tr>
</table>

Example:

```
- name: example_string_list
  type: string_list
  configurable: true
  default: 'foo,bar,baz'
```

#### ca\_certificate

Holds a string value.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
- name: example_ca_certificate
  type: ca-certificate
  configurable: true
  default: |
    -- BEGIN EXAMPLE CERT --
    -- END EXAMPLE CERT --
```

#### multi\_select\_options

Holds an array of selected string values.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns an array of strings for the selected options</td>
  </tr>
</table>

Example:

```
- name: example_multi_select_options
  type: multi_select_options
  configurable: true
  default: ['earth', 'mercury']
         options:
         - name: mercury
           label: 'label for mercury'
         - name: venus
           label: 'label for venus'
         - name: earth
           label: 'label for earth'
```

#### dropdown\_select

Holds an array of selectable string values.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
   - name: example_dropdown
      type: dropdown_select
      configurable: true
      default: kiwi
      options:
        - name: kiwi
          label: 'label for kiwi'
        - name: lime
          label: 'label for lime'
        - name: avocado
          label: 'label for avocado'
```

#### vm\_type\_dropdown

Holds single string value selected from allowed `vm_types`.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
- name: example_vm_type_dropdown
  type: vm_type_dropdown
  configurable: true
```

#### disk\_type\_dropdown

Holds single string value selected from allowed `disk_types`.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
- name: example_disk_type_dropdown
  type: disk_type_dropdown
  configurable: true
```

#### uuid

Holds a string UUID value.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
- name: example_uuid
  type: uuid
  configurable: true
```

#### service\_network\_az\_multi\_select

Holds an array of string values selected from allowed Availability Zones (AZs).

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns an array of strings for the selected options</td>
  </tr>
</table>

Example:

```
- name: example_service_network_az_multi_select
  type: service_network_az_multi_select
  configurable: true
```

#### service\_network\_az\_single\_select

Holds a single string value selected from allowed AZs.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
- name: example_service_network_az_single_select
  type: service_network_az_single_select
  configurable: true
```

#### secret

Holds a single string value.

Accessors:

<table class="nice"><tr>
  <td>value</td>
  <td>Returns a string</td>
  </tr>
</table>

Example:

```
- name: example_secret
  type: secret
  configurable: true
```

## <a id='top-level'></a> Top Level Properties

The following is an example of the properties that appear at the top of a product template. Definitions of each property follow this example.

<pre class="code">
  ---
  name: example-product
  product_version: &lt;%= version.inspect %>
  minimum_version_for_upgrade: "1.7.0"
  metadata_version: "1.11"
  label: 'Ops Manager: Example Product'
  description: An example product to demonstrate Ops Manager product-author features
  rank: 1
  service_broker: false # Default value
  stemcell_criteria:
    os: ubuntu-trusty
    version: &lt;%= stemcell_version.inspect %&gt;

    enable_patch_security_updates: true
  releases:
    - name: example-release
      file: &lt;%= release_file_name.inspect %&gt;
      version: &lt;%= release_file_name.match(/^example-release-(.*)\.tgz$/)[1].inspect %&gt;

  variables:
    - name: credhub-password
      type: password

  post_deploy_errands:
    - name: example-errand

  pre_delete_errands:
    - name: example-errand
</pre>

### <a id='top-name'></a> name

* **Format:** String
* **Type:** Required

The internal name of the product. You must keep the name of your product consistent for migrations to function properly.
Changing the name indicates the installation of a completely different product.

### <a id='top-version'></a> product\_version

* **Format:** String
* **Type:** Required

The version of the product. 

You can only import this version into Ops Manager once. If you want to import the same product or version, you must delete the existing one from the `/metadata` folder and delete the installation files from Ops Manager's disk.

The version number is important for [migrations](./tile-upgrades.html).

### <a id='top-min-version'></a> minimum\_version\_for\_upgrade

* **Format:** String
* **Type:** Optional

Pivotal recommends that you set a minimum version for upgrading to your current product version.
This example shows a current product version of v1.7 that only upgrades from a v1.6.x version of the same product:

```
- product_version:  1.7.0.0
  minimum_version_for_upgrade:  1.6.0.0
```

### <a id='top-metadata'></a> metadata_version

* **Format:** String
* **Type:** Required

The versioned structure of the product template, which is the file you are editing. The metadata version does not always correlate to Ops Manager version number and depends on what, or if, new metadata properties were introduced.

Changing the version number can unlock new properties and also break properties that changed from previous versions. 

### <a id='top-label'></a> label

* **Format:** String
* **Type:** Optional

The label that appears in the product tile when it displays in the Ops Manager Dashboard.

### <a id='top-description'></a> description

* **Format:** String
* **Type:** Optional

A description of the product. 

### <a id='top-rank'></a> rank

* **Format:** Integer
* **Type:** Optional

The order in which a product tile appears on the dashboard. The Ops Manager Director always appears at rank 100.

For your product to appear to the right of Ops Manager Director, you must set this value to an integer less than 100.

Pivotal recommends that you set it to 1.

If all tiles have the same rank, Ops Manager sorts them alphabetically.

### <a id='top-service-broker'></a> service_broker

* **Format:** Boolean
* **Type:** Optional, default `false`

Set `service_broker` to `true` for on-demand service brokers. Setting `service_broker` to `true` does the following:

* Enables the service network selector property type
* Requires the operator to select a service network during tile configuration. Tile authors can reference the selected service network with `(( $self.service_network ))`.
* Includes a UAA client for the service to use. Tile authors can reference the UAA client credentials with `(( $self.uaa_client_name ))` and `(( $self.uaa_client_secret ))`.

### <a id='top-stemcell-criteria'></a> stemcell_criteria

* **Format:** Hash
* **Type:** Required 

`enable_patch_security_updates` allows you to automatically use the latest patched version of a stemcell. This is set to `true` by default. For products using static compilations, you can disable this feature. This feature increases security by automatically using the latest patched version of a stemcell. However, operators may experience longer than expected upgrade times. 

Example:

 <pre class="code">
 stemcell\_criteria
  os: ubuntu-trusty
  version: &lt;%= stemcell\_version.inspect %>
  enable\_patch\_security\_updates: true
 </pre>

Pivotal recommends setting this property to `true`. If you set the property to `false`, your product does not receive security patches through automatic stemcell updates. 

You do not specify which IaaS the Stemcell targets. This keeps your product template IaaS agnostic so that one product template can be deployed on any IaaS.

For a list of stemcells, including OS and version, see [the BOSH hub](https://bosh.io/).

For more information, see [Understanding Floating Stemcells](http://docs.pivotal.io/pivotalcf/customizing/understanding-stemcells.html).

### <a id='top-release'></a> releases

* **Format:** Array of hashes
* **Type:** Required 

The list of releases contained in your product's releases directory.

The version of the release must be exactly the same as the version contained in the release (BOSH releases are versioned and signed by BOSH).

### <a id='top-post-deploy'></a> post\_deploy\_errands

* **Format:** Array of hashes
* **Type:** Optional 

A list of errands that run after a deploy succeeds.

Set the `run_post_deploy_errand_default:` property to `on` or `off` to set the default for the errand's run rule selector in Ops Manager.

See [Lifecycle Errands](./tile-errands.html). If this property is not supplied, the selector defaults to `On`.

### <a id='top-pre-delete'></a> pre\_delete\_errands

* **Format:** Array of hashes
* **Type:** Optional 

A list of errands that run before a deployment is deleted.

Set the `run_pre_delete_errand_default:` property to `on` or `off` to set the default for the errand's run rule selector in Ops Manager. If you do not specify this property, the selector defaults to `On`. 

For more information, see [Lifecycle Errands](./tile-errands.html). 

## <a id='form-properties'></a> Form Properties

Each form type you write is composed of form properties. Form properties dictate the structure of the form fields that appear in the Ops Manager UI. The `name` of each form appears on the left-hand side as navigational tabs.

Form properties reference `property_blueprints`. Property blueprints define each field's data type. For a corresponding example to the `form_types` example below, see [property_blueprints](#property-blueprints).


The following is an example of the properties that appear in the `form_types` section of a product template:

  ```
form_types:
  - name: example-form
    label: Configurable Properties
    description: All the properties that you can configure!
    markdown: |
      ## I am markdown, hear me _roar_.

      ![Alt text](http://placekitten.com/g/400/200)

      Things to do:

      1. Learn [markdown](https://daringfireball.net/projects/markdown/).
      1. ...
      1. Profit!
    property_inputs:
      - reference: .web_server.example_string
        label: Example string
        description: 'Configure a property of type string'
      - reference: .web_server.example_string_with_placeholder
        label: Example string containing Placeholder text
        description: 'Optional field. Configuration not necessary'
        placeholder: 'Ghost text. Spooky!'
      - reference: .web_server.example_migrated_integer
        label: Example integer
        description: 'Configure a property of type integer'
      - reference: .web_server.example_boolean
        label: Example boolean
        description: 'Configure a property of type boolean'
      - reference: .web_server.example_dropdown
        label: Example dropdown
        description: 'Configure a property of type dropdown'
      - reference: .web_server.example_domain
        label: Example domain
        description: 'Configure a property of type domain'
      - reference: .web_server.example_wildcard_domain
        label: Example wildcard_domain
        description: 'Configure a property of type wildcard_domain'
      - reference: .web_server.example_string_list
        label: Example string_list
        description: 'Configure a property of type string_list'
      - reference: .web_server.example_text
        label: Example text
        description: 'Configure a property of type text (setting to "magic value" causes the web server job instance count to go to 0)'
      - reference: .web_server.example_ldap_url
        label: Example ldap_url
        description: 'Configure a property of type ldap_url'
      - reference: .web_server.example_email
        label: Example email
        description: 'Configure a property of type email'
      - reference: .web_server.example_http_url
        label: Example http_url
        description: 'Configure a property of type http_url'
      - reference: .web_server.example_ip_address
        label: Example ip_address
        description: 'Configure a property of type ip_address'
      - reference: .web_server.example_ip_ranges
        label: Example ip_ranges
        description: 'Configure a property of type ip_ranges'
      - reference: .web_server.example_multi_select_options
        label: Example multi_select_options
        description: 'Configure a property of type multi_select_options'
      - reference: .web_server.example_network_address_list
        label: Example network_address_list
        description: 'Configure a property of type network_address_list (this property was marked with freeze_on_deploy, and so will not be editable after changes are first applied)'
      - reference: .web_server.example_network_address
        label: Example network_address
        description: 'Configure a property of type network_address'
      - reference: .web_server.example_port
        label: Example port
        description: 'Configure a property of type port'
      - reference: .web_server.example_smtp_authentication
        label: Example smtp_authentication
        description: 'Configure a property of type smtp_authentication'
      - reference: .web_server.client_certificate
        label: Example certificate
        description: 'Configure a certificate'
    verifiers:
      - name: Verifiers::WildcardDomainVerifier
        properties:
          domain: .web_server.example_wildcard_domain
      - name: Verifiers::StaticIpsVerifier
        properties:
          domain: .web_server.example_ip_address
  ```

### <a id='form-name'></a> name

* **Format:** String
* **Type:** Required

The internal name of the form.

### <a id='form-label'></a> label

* **Format:** String
* **Type:** Required

The label of the form as it appears as a link on the left hand side of each form.

### <a id='form-description'></a> description

* **Format:** String
* **Type:** Optional 

The description of the form. Appears at the top of the form as a header.

### <a id='form-markdown'></a> markdown

* **Format:** Markdown 
* **Type:** Optional

Provide a block of markdown to display at the top of the form, including image support.
<!--WHAT KIND OF IMAGES?-->
Use this property to document the tile and provide explanations or references.

### <a id='form-property-inputs'></a> property_inputs

* **Format:** Array of hashes 
* **Type:** Required

References to properties defined in the [property_blueprints](#property-blueprints) section of the product template.

### <a id='verifiers'></a> verifiers

Verifiers are configurable settings that contact things outside the tile. For example, given an IP, a verifier can ping the IP to see that it responds.

Verifiers are separate from validators, which check whether a string is formatted properly. For an example of a validator, see [ must\_match\_regex](#top-must-match).

Here is a list of verifiers you can use:

- `BlobstoreVerifier`
- `LDAPBindVerifier`
- `MysqlDatabaseVerifier`
- `SmtpAuthenticationVerifier`
- `SsoUrlVerifier`
- `StaticIpsVerifier`
- `WildcardDomainVerifier`

<!-- IS THIS LIST UP TO DATE, OR DO WE HAVE MORE VERIFIERS THAN THIS? -->

<!-- DO WE WANT TO LINK TO THE GRANULAR VERIFIER CONTROL DOCS IN THIS SECTION? -->

### <a id='form-placeholder'></a> placeholder

* **Format:** String 
* **Type:** Optional

Specify placeholder text for a field. The text appears in light gray to show an example value for the user. The text disappears when the user types in the field and reappears if the user leaves the field empty.  

 The `placeholder` attribute displays for the following form types:

  * string
  * integer
  * domain
  * wildcard_domain
  * string_list
  * text
  * ldap_url
  * email
  * http_url
  * ip_address
  * ip_ranges
  * network\_address\_list
  * network_address
  * port

## <a id='property-blueprints'></a> Property Blueprints

The following is an example of the `property_blueprints` that appear in a product template.

The example is referenced by the form properties example above. See [Form Properties](#form-properties).

<pre style="height: 500px; overflow: auto;">
  - name: web_server

    . . .

    property_blueprints:
      - name: property_with_nil_value
        type: string
      - name: property_with_false_value
        type: boolean
        configurable: false
        default: false
      - name: property_with_true_value
        type: boolean
        configurable: false
        default: true
      - name: static_ips
        configurable: true
        optional: true
      - name: generated_secret
        type: secret
      - name: generated_uuid
        type: uuid
      - name: configured_secret
        type: secret
        configurable: true
        optional: true
      - name: configured_simple_credentials
        type: simple_credentials
        configurable: true
        optional: true
      - name: configured_rsa_cert_credentials
        type: rsa_cert_credentials
        configurable: true
        optional: true
      - name: example_string_with_placeholder
        type: string
        configurable: true
        optional: true
        placeholder: 'Configure me!'
      - name: example_string
        type: string
        configurable: true
        default: 'Hello world'
        constraints:
        - must_match_regex: '\A[^!@#$%^&*()]*\z'
          error_message: 'This name cannot contain special characters.'
        - must_match_regex: '\A[^0-9]*\z'
          error_message: 'This name cannot contain digits.'
      - name: example_migrated_integer
        type: integer
        configurable: true
        default: 1
      - name: example_boolean
        type: boolean
        configurable: true
        default: true
      - name: example_dropdown
        type: dropdown_select
        configurable: true
        default: kiwi
        options:
          - name: kiwi
            label: 'label for kiwi'
          - name: lime
            label: 'label for lime'
          - name: avocado
            label: 'label for avocado'
      - name: example_domain
        type: domain
        configurable: true
        default: www.example.com
      - name: example_wildcard_domain
        type: wildcard_domain
        configurable: true
        default: 'example.com'
      - name: example_string_list
        type: string_list
        configurable: true
        default: 'a,list,of,strings'
      - name: example_text
        type: text
        configurable: true
        default: 'some_text'
      - name: example_ldap_url
        type: ldap_url
        configurable: true
        default: 'ldap://example.com'
      - name: example_email
        type: email
        configurable: true
        default: foo@example.com
      - name: example_http_url
        type: http_url
        configurable: true
        default: 'http://www.example.com'
      - name: example_ip_address
        type: ip_address
        configurable: true
        default: '192.168.0.1'
      - name: example_ip_ranges
        type: ip_ranges
        configurable: true
        default: '1.1.1.1-1.1.1.4,2.2.2.1-2.2.2.4'
      - name: example_multi_select_options
        type: multi_select_options
        configurable: true
        default: ['earth', 'jupiter']
        options:
          - name: mercury
            label: 'label for mercury'
          - name: venus
            label: 'label for venus'
          - name: earth
            label: 'label for earth'
          - name: mars
            label: 'label for mars'
          - name: jupiter
            label: 'label for jupiter'
          - name: saturn
            label: 'label for saturn'
          - name: uranus
            label: 'label for uranus'
          - name: neptune
            label: 'label for neptune'
      - name: example_network_address_list
        type: network_address_list
        configurable: true
        default: '1.1.1.1,example.com,foo.bar.example.com'
        freeze_on_deploy: true
      - name: example_network_address
        type: network_address
        configurable: true
        default: '1.1.1.1'
      - name: example_port
        type: port
        configurable: true
        default: 1111
      - name: example_smtp_authentication
        type: smtp_authentication
        configurable: true
        default: plain
      - name: client_certificate
        type: ca_certificate
        configurable: true
        optional: true
      - name: example_vm_type_dropdown
        type: vm_type_dropdown
        configurable: true
        optional: true
        resource_definitions:
        - name: ram
          configurable: true
          default: 1024
        - name: ephemeral_disk
          configurable: true
          default: 1024
        - name: cpu
          configurable: true
          default: 1
      - name: example_disk_type_dropdown
        type: disk_type_dropdown
        configurable: true
        optional: true
        resource_definitions:
        - name: persistent_disk
          default: 2000
</pre>


### <a id='top-configurable'></a> configurable

No property will be viewable in a form unless `configurable` is set to `true`.
Rather than giving the user the ability to enter a value, the value is generated by Ops Manager.

### <a id='top-must-match'></a> must\_match\_regex 

Regular Expression. Optional. Create a validator that runs on the form save event.
If the user input does not match the `must_match_regex` constraint, the form displays the specified `error_message`.
Multiple `must_match_regex` constraints for a single property blueprint are evaluated in the order listed. 

## <a id='configurable-props'></a> Configurable Properties

Many of these properties are strings, but can be used with validators in order to check that the user typed in the correct format for a URL, IP, address, domain, etc.

### <a id='configurable-string'></a> string

* **Format:** String

### <a id='configurable-integer'></a> integer

* **Format:** Integer

### <a id='configurable-boolean'></a> boolean

* **Format:** Boolean 

Displays as a checkbox.

### <a id='configurable-dropdown'></a> dropdown_select

* **Format:** List of options

The user chooses one viewed as an HTML select box.

### <a id='configurable-multiselect'></a> multi\_select\_options

* **Format:** List of options

The user chooses zero or more, viewed as HTML checkboxes.

### <a id='configurable-domain'></a> domain

* **Format:** Second, third, fourth, or greater level domain.

### <a id='configurable-wildcard-domain'></a> wildcard_domain

* **Format:** Domain with a wildcard in front of it. 

Example: `*.domain.com`

### <a id='configurable-text'></a> text

* **Format:** String

Appears as an HTML textarea.

### <a id='configurable-ldap-url'></a> ldap_url

* **Format:** URL prefaced by `ldap://`

### <a id='configurable-email'></a> email

* **Format:** Email address

### <a id='configurable-ips'></a> ip_ranges

* **Format:** Range of IP addresses

Dashes and commas are allowed. 

Example: `1.1.1.1-1.1.1.4,2.2.2.1-2.2.2.4`

### <a id='configurable-port'></a> port

* **Format:** Integer 

This integer represents a network port.

### <a id='configurable-address'></a> network_address

* **Format:** IP address or domain

Example: `1.1.1.1`

### <a id='configurable-address-list'></a> network\_address\_list

* **Format:** List of IP addresses or domains

Example: `1.1.1.1,example.com,2.2.2.2`

### <a id='generated'></a> Generated Properties (can also be configurable)

The following properties are configurable, but can also be generated by Ops Manager if configurable is set to `false` or the configurable key is omitted.

The exceptions are the UUID and salted credentials properties, which are never configurable.

### <a id='generated-cert-creds'></a> rsa\_cert\_credentials

* **Format:** RSA certificate

### <a id='generated-pkey-creds'></a> rsa\_pkey\_credentials

* **Format:** RSA private key

### <a id='generated-salted-creds'></a> salted_credentials

* **Format:** Username and password created using a non-reversible hash algorithm

<p class="note"><strong>Note</strong>: This property is not configurable.</p>

### <a id='generated-simple-creds'></a> simple_credentials

* **Format:** Username and password

### <a id='generated-secret'></a> secret

* **Format:** Random string or password

### <a id='generated-uuid'></a> UUID

* **Format:** Universal unique identifier.

### <a id='complex'></a> Complex Properties

Most properties are simple values such as strings, integers, URL addresses, or IP addresses.
Others are complex, such as selectors or collections.

* **Selectors**: Give the user a choice of a set of inputs
* **Collections**: Give the user the ability to enter an array of values to create a hash

Selectors appear as follows:

![Selector](img/selector.png)

Collections appear as follows:

![Collection](img/collection.png)

The selector and collections inputs are referenced by their selector and collection property blueprints.

Most properties are simple values such as strings, integers, URL addresses, or IP addresses. Selectors and collections are more complicated than simple properties because they contain manifest snippets, which are further referenced in other manifest snippets.

## <a id='job-types'></a> Job Types

The following is an example of the `job_types` section that appears in a product template. 

This section defines the jobs that end up in a BOSH manifest. Those jobs are defined in your BOSH release.

Jobs require many different settings in order to function properly. That is the core of what Ops Manager does for you: Ops Manager asks a user to designate values for those settings and generates a manifest based on what the user specifies.

Ops Manager does not require product authors to provide `vm_credentials` in the `property_blueprints` for each `job_type`. This is because `vm_credentials` are generated automatically. You can find them in the release manifest. 

<p class="note"><strong>Note: </strong> Starting in PCF v2.1, Ops Manager ignores <code>static_ip</code> and <code>dynamic_ip</code> keys.</p>

<pre style="height: 500px; overflow: auto;">

  job_types:
    - name: web_server
      resource_label: Web Server
      templates:
        - name: web_server
          release: example-release
        - name: time_logger
          release: example-release
      release: example-release
      static_ip: 1
      dynamic_ip: 0
      max_in_flight: 1
      single_az_only: true:
      instance_definition:
        name: instances
        type: integer
        configurable: true
        default: 1
        constraints:
          max: 1
        zero_if:
          property_reference: '.web_server.example_text'
          property_value: 'magic value'
      resource_definitions:
        - name: ram
          type: integer
          configurable: true
          default: 1024
        - name: ephemeral_disk
          type: integer
          configurable: true
          default: 2048
        - name: persistent_disk
          type: integer
          configurable: true
          default: 1024
          constraints:
            min: 1024
        - name: cpu
          type: integer
          configurable: true
          default: 1
      property_blueprints:
      - name: static_ips
        type: ip_ranges
        configurable: true
        optional: true
      - name: generated_rsa_cert_credentials
        type: rsa_cert_credentials
      - name: generated_rsa_pkey_credentials
        type: rsa_pkey_credentials
      - name: generated_salted_credentials
        type: salted_credentials
      - name: generated_simple_credentials
        type: simple_credentials
      - name: generated_secret
        type: secret
      - name: generated_uuid
        type: uuid
      - name: example_string_with_placeholder
        type: string
        configurable: true
        optional: true
        placeholder: 'Configure me!'
      - name: example_string
        type: string
        configurable: true
        default: 'Hello world'
        constraints:
        - must_match_regex: '^[^!@#$%^&*()]*$'
          error_message: 'This name cannot contain capital digits.'
        - must_match_regex: '^[^0-9]*$'
          error_message: 'This name cannot contain digits.'
      - name: example_migrated_integer
        type: integer
        configurable: true
        default: 1
      - name: example_boolean
        type: boolean
        configurable: true
        default: true
      - name: example_dropdown
        type: dropdown_select
        configurable: true
        default: kiwi
        options:
          - name: kiwi
            label: 'label for kiwi'
          - name: lime
            label: 'label for lime'
          - name: avocado
            label: 'label for avocado'
      - name: example_domain
        type: domain
        configurable: true
        default: www.example.com
      - name: example_wildcard_domain
        type: wildcard_domain
        configurable: true
        default: 'example.com'
      - name: example_string_list
        type: string_list
        configurable: true
        default: 'a,list,of,strings'
      - name: example_text
        type: text
        configurable: true
        default: 'some_text'
      - name: example_ldap_url
        type: ldap_url
        configurable: true
        default: 'ldap://example.com'
      - name: example_email
        type: email
        configurable: true
        default: foo@example.com
      - name: example_http_url
        type: http_url
        configurable: true
        default: 'http://www.example.com'
      - name: example_ip_address
        type: ip_address
        configurable: true
        default: '192.168.0.1'
      - name: example_ip_ranges
        type: ip_ranges
        configurable: true
        default: '1.1.1.1-1.1.1.4,2.2.2.1-2.2.2.4'
      - name: example_multi_select_options
        type: multi_select_options
        configurable: true
        default: ['earth', 'jupiter']
        options:
          - name: mercury
            label: 'label for mercury'
          - name: venus
            label: 'label for venus'
          - name: earth
            label: 'label for earth'
          - name: mars
            label: 'label for mars'
          - name: jupiter
            label: 'label for jupiter'
          - name: saturn
            label: 'label for saturn'
          - name: uranus
            label: 'label for uranus'
          - name: neptune
            label: 'label for neptune'
      - name: example_network_address_list
        type: network_address_list
        configurable: true
        default: '1.1.1.1,example.com,foo.bar.example.com'
      - name: example_network_address
        type: network_address
        configurable: true
        default: '1.1.1.1'
      - name: example_port
        type: port
        configurable: true
        default: 1111
      - name: example_smtp_authentication
        type: smtp_authentication
        configurable: true
        default: plain
      - name: client_certificate
        type: ca_certificate
        configurable: true
        optional: true
      manifest: |
        generated:
          root_rsa_certificate: (( $ops_manager.ca_certificate ))
          rsa_cert_credentials:
            public_key_pem: (( generated_rsa_cert_credentials.public_key_pem ))
            cert_and_private_key_pems: (( generated_rsa_cert_credentials.cert_and_private_key_pems ))
          rsa_pkey_credentials:
            public_key_pem: (( generated_rsa_pkey_credentials.public_key_pem ))
            private_key_pem: (( generated_rsa_pkey_credentials.private_key_pem ))
            public_key_openssh: (( generated_rsa_pkey_credentials.public_key_openssh ))
            public_key_fingerprint: (( generated_rsa_pkey_credentials.public_key_fingerprint ))
          salted_credentials:
            sha512_hashed_password: (( generated_salted_credentials.sha512_hashed_password ))
            identity: (( generated_salted_credentials.identity ))
            salt: (( generated_salted_credentials.salt ))
            password: (( generated_salted_credentials.password ))
          simple_credentials:
            identity: (( generated_simple_credentials.identity ))
            password: (( generated_simple_credentials.password ))
          secret: (( generated_secret.value ))
          uuid: (( generated_uuid.value ))
        configured:
          string: (( example_string.value ))
          integer: (( example_migrated_integer.value ))
          ...
          record_collection: (( .properties.example_collection.value || [] ))
          selector: (( .properties.example_selector.selected_option.parsed_manifest(my_snippet) ))
        ops_manager_provided_accessors:
          name: (( name ))
          ram: (( ram ))
          ephemeral_disk: (( ephemeral_disk ))
          persistent_disk: (( persistent_disk ))
          instances: (( instances ))
          availability_zone: (( availability_zone ))
          bosh_job_partition_stats: (( bosh_job_partition_stats ))
</pre>

### <a id='job-name'></a> name

* **Format:** String
* **Type:** Required

The name of the job as it will be created in the Ops Manager generated BOSH manifest.

### <a id='job-label'></a> resource_label

* **Format:** String
* **Type:** Required

The label of the job as it will appear in the resources page of the tile.

### <a id='job-template'></a> templates

* **Format:** Array of hashes
* **Type:** Required

Each element has the following fields:

#### <a id='template-name'></a> name

* **Format:** Name of the job template to use
* **Type:** Required

#### <a id='template-release'></a> release

* **Format:** Name of the release the template is from
* **Type:** Required

#### <a id='template-consumes'></a> consumes

* **Format:** YAML string defining [BOSH links](https://bosh.io/docs/links.html) that this job consumes
* **Type:** Optional

#### <a id='template-provides'></a> provides

* **Format:** YAML string defining [BOSH links](https://bosh.io/docs/links.html) that this job provides
* **Type:** Optional

This is a BOSH feature (creating jobs from different releases). See the [BOSH documentation](https://bosh.io/) for more information.

### <a id='job-release'></a> release

* **Format:** String
* **Type:** Required

The name of the BOSH release contained in your product archive, which is the `.pivotal` file.

### <a id='job-single-az'></a> single\_az\_only

* **Format:** Boolean
* **Type:** Required

You can give users control of balancing jobs across availability zones (AZs) by setting `single_az_only` to `false`.

To limit a job to a single AZ, set `single_az_only` to `true`. 

<p class="note warning"><strong>WARNING</strong>: If you change the <code>single_az_only</code> setting, your VMs may switch AZs. This change can cause an orphaned disk.</p>

### <a id='job-max-in-flight'></a> max\_in\_flight

* **Format:** Integer
* **Type:** Required

A BOSH setting that controls the number of instances of this job that BOSH will deploy in parallel.

### <a id='job-resource-def'></a> resource_definition

* **Format:** Array of hashes
* **Type:** Required

A set of resource settings for the job along with maximum and minimum constraints, defaults,
and enabled or disabled configurability.

The resources you can set are:

- ram
- ephemeral_disk
- persistent_disk
- cpu

<p class="note"><strong>Note</strong>: If you set the <code>default</code> property for <code>persistent_disk</code> to <code>0</code>,
users cannot edit this value and the <strong>Resource Config</strong> page in <strong>Ops Mananger</strong> displays <strong>None</strong> under the persistent disk field.</p>

### <a id='job-instance-def'></a> instance_definition

* **Format:** Hash
* **Type:** Required

The number of default instances for a job, including maximum, minimum, odd, and the ability to decrease sizing after deploy.

If your product uses an external service that performs the same job as a service in Elastic Runtime,
you can reduce resource usage by setting the instance count of a job to `0` with the `zero_if` property.

For example, your product uses Amazon Relational Database Service (RDS) instead of MySQL, which is the default system database for Elastic Runtime. Remove all instance counts of MySQL by setting `property reference` to `.properties.system.database` and `property value` to `magic value`. 

### <a id='job-manifest'></a> manifest

* **Format:** Text snippet, prefaced by pipe symbol: `|`
* **Type:** Optional

Ops Manager generates a BOSH manifest that defines properties for each job the manifest deploys.
Some of these properties are not set until the user clicks **Apply Changes**, because the user configures them in the tile or because Ops Manager has to generate them.

For more information about these properties, see [Designating Property Values](#property-values).

### <a id='named-manifest'></a> named_manifest

Specify a property for collection within the `named_manifest` section of the metadata.

For more information about collections, see [Complex Properties](#complex).

The following example uses a named manifest called `for_routing` that belongs to the `certificate_collection` job:

```
  - name: certificate_collection
    type: collection
    configurable: true
    property_blueprints:
      - name: some_cert_name
        type: string
      - name: some_cert
        type: rsa_cert_credentials
    named_manifests:
    - name: for_routing
      manifest: |
        name:  (( current_record.some_cert_name.value ))
        private_key:  (( current_record.some_cert.private_key_pem ))
        public_key:  (( current_record.some_cert.public_key_pem ))
        certificate: (( current_record.some_cert.cert_pem ))
```

Use the `current_record` property within a collection record to refer to other properties in the same record.

For example, the properties in the `for_routing` named manifest refer to the values for `name`, `private_key`, `public_key`, and `certificate` within this record only.

<p class="note"><strong>Note:</strong> The <code>current_record</code> property is reserved. You cannot create a new property named <code>current_record</code>.</p>

After defining a named manifest, you can reference it using a manifest snippet in the following format:

```
routing_certificates: (( .properties.certificate_collection.parsed_manifest(for_routing) ))
```

Ops Manager renders the following manifest from this example:

```
routing_certificates:
  - name: foo_cert
    private_key: PRIVATE-KEY
    public_key: PUBLIC-KEY
    certificate: CERTIFICATE
  - name: bar_cert
    private_key: PRIVATE-KEY
    public_key: PUBLIC-KEY
    certificate: CERTIFICATE
```

### <a id='selector-snippets'></a> Selector Manifest Snippets

Selector snippets are evaluated twice. As you saw in the `property_blueprint`,
the selector has a manifest snippet for both sets of inputs that the user might choose.

Only one of these sets is evaluated and inserted into the job's manifest.

### <a id='ops-man-snippets'></a> Ops Manager Provided Snippets

The following double-parens accessors retrieve your job properties:

  * name: `(( name ))`
  * ram: `(( ram ))`
  * ephemeral\_disk: `(( ephemeral_disk ))`
  * persistent\_disk: `(( persistent_disk ))`
  * instances: `(( instances ))`
  * availability\_zone: `(( availability_zone ))` (deprecated)
  * bosh\_job\_partition\_stats: `(( bosh_job_partition_stats ))` (deprecated)
  * first\_network\_deprecated: `(( first_network_deprecated ))` (deprecated)
  * subnet\_cidrs: `(( subnet_cidrs ))`

For more information about these properties, see [Designating Property Values](#property-values).

<p class="note"><strong>Note: </strong> As of PCF v2.1, IP accessors are no longer supported.</p>

The following is a list of all typed values with the accessor "value":

  * collection
  * ldap\_url
  * domain
  * wildcard\_domain
  * ip\_ranges
  * ip\_address
  * email
  * port
  * integer
  * string
  * boolean
  * text
  * smtp\_authentication
  * network\_address
  * network\_address\_list
  * string\_list
  * ca\_certificate
  * multi\_select\_options
  * dropdown\_select
  * vm\_type\_dropdown
  * disk\_type\_dropdown
  * uuid
  * service\_network\_az\_multi\_select
  * service\_network\_az\_single\_select
  * secret

The following list shows typed values with multiple accessors:

  * simple\_credentials: identity, password
  * rsa\_cert\_credentials: private\_key\_pem, cert\_pem, public\_key\_pem, cert\_and\_private\_key\_pems  
  * rsa\_pkey\_credentials: private\_key\_pem, public\_key\_pem, public\_key\_openssh, public\_key\_fingerprint
  * salted\_credentials: salt, identity, password
  * selector: value, selected\_option, nested context

  In addition, Ops Manager supports accessors that are global to the entire installation rather than job specific. 
  
  * $ops\_manager.ca\_certificate: The internal SSL CA certificate used to sign all SSL certificates generated by this Ops Manager instance, such as when the user clicks a **Generate Self-Signed RSA Certificate** link
  *  $ops\_manager.trusted\_certificates
  *  $ops\_manager.http\_proxy
  *  $ops\_manager.https\_proxy
  *  $ops\_manager.no\_proxy
  *  $director.deployment\_ip
  *  $director.hostname
  *  $director.username
  *  $director.password
  *  $director.ntp\_servers
  *  $director.ca\_public\_key
  *  $director.tld
  *  $director.bosh\_metrics\_forwarder\_client\_name
  *  $director.bosh\_metrics\_forwarder\_client\_secret
  *  $self.uaa\_client\_name
  *  $self.uaa\_client\_secret
  *  $self.service\_network
  *  $self.stemcell\_version
  * ..PRODUCT-NAME.properties
  * ..PRODUCT-NAME.deployment\_name
